name: ApproveOps
on:
  issue_comment:
    types: [created, edited]

run-name: 'ApproveOps - "${{ github.event.issue.title }}" #${{ github.event.issue.number }} by ${{ github.event.comment.user.login }}'

jobs:
  approveops:
    runs-on: ubuntu-latest
    if: contains(github.event.comment.body, '/run-dry-run-migration')
    # optional - if we want to use the output to determine if we run the migration job or not
    outputs: 
      approved: ${{ steps.check-approval.outputs.approved }}
      
    steps:
    - uses: actions/create-github-app-token@v1
      id: app-token
      with:
        app-id: 170284
        private-key: ${{ secrets.PRIVATE_KEY }}

    - name: ApproveOps - Approvals in IssueOps
      uses: joshjohanning/approveops@v2
      id: check-approval
      with:
        token: ${{ steps.app-token.outputs.token }}
        approve-command: '/approve'
        team-name: 'approver-team'
        fail-if-approval-not-found: false
        # post-successful-approval-comment: false

      # - uses: tibdex/github-app-token@v1
      #   id: get_installation_token
      #   with:
      #     app_id: 170284
      #     private_key: ${{ secrets.PRIVATE_KEY }}
          
      # - id: check-approval
      #   name: check if there is an approve command from authorized party
      #   run: | 
      #     users=$(curl -sLX GET 'https://api.github.com/orgs/${{ github.repository_owner }}/teams/approver-team/members' \
      #       --header "Accept: application/vnd.github.v3+json" \
      #       --header "Authorization: Bearer ${{ steps.get_installation_token.outputs.token }}" | jq -c '.[].login')

      #     approveCommand="/approve"
      #     comments=$(curl -sLX GET '${{ github.event.comment.issue_url }}/comments' \
      #       --header "Accept: application/vnd.github.v3+json" \
      #       --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}")

      #     authorized=false

      #     for comment in $(echo $comments | jq -r '.[] | @base64'); do
      #         body=$(echo $comment | base64 --decode | jq -r '.body')
      #         actor=$(echo $comment | base64 --decode | jq -r '.user.login')
      #         if [[ $body == *"$approveCommand"* ]]; then
      #             echo "Approve command found..."
      #             echo $users | grep -q $actor && echo "Found $actor in users" && authorized=true || echo "Not found $actor in users"
      #         else
      #             echo "Approve command not found..."
      #         fi
      #     done

      #     if $authorized; then
      #         echo "Authorized"
      #         echo "::set-output name=approved::true"
      #     else
      #         echo "Not authorized"
      #         echo "::set-output name=approved::false"
      #         echo "::error title=Not Approved::There is no /approve command in the comments from an authorized party"
      #     fi
          
      # - if: ${{ steps.check-approval.outputs.approved == 'false' }}
      #   name: Create completed comment
      #   uses: peter-evans/create-or-update-comment@v1
      #   with:
      #     token: ${{ steps.get_installation_token.outputs.token }}
      #     issue-number: ${{ github.event.issue.number }}
      #     body: |
      #       Hey, @${{ github.event.comment.user.login }}!
      #       :cry:  No one approved your run yet! Have someone from the @joshjohanning-org/approver-team run `/approve` and then try your command again
      #       :no_entry_sign: :no_entry: Marking the workflow run as failed

      # - if: ${{ steps.check-approval.outputs.approved == 'true' }}
      #   name: Create completed comment
      #   uses: peter-evans/create-or-update-comment@v1
      #   with:
      #     token: ${{ steps.get_installation_token.outputs.token }}
      #     issue-number: ${{ github.event.issue.number }}
      #     body: |
      #       Hey, @${{ github.event.comment.user.login }}!
      #       :tada:  You were able to run the migration because someone approved!! :tada:
        
      # # optional - if we just want the action run stop right here
      # # - if: ${{ steps.check-approval.outputs.approved == 'false' }}
      # #   name: exit if not approved
      # #   run: exit 1
  
  migration:
    needs: approveops
    # optional - if we want to use the output to determine if we run the migration job or not
    if: ${{ needs.approveops.outputs.approved == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - run: echo "run migration!"


########### old bash using gh api in approveops initially - test.sh ###########

# # users=$(gh api --paginate '/orgs/joshjohanning-org/teams/approver-team/members' | jq -c '.[].login')

# users=$(gh api --paginate '/orgs/joshjohanning-org/teams/approver-team/members' --jq '.[].login')
# if [ $? -ne 0 ]; then
#     echo "Error: Unable to fetch users"
#     exit 1
# fi

# echo $users
# exit 0

# approveCommand="/approve"
# authorized=false
# comments=$(gh api --paginate 'https://api.github.com/repos/joshjohanning-org/test-approveops/issues/2/comments')
# for comment in $(echo $comments | jq -r '.[] | @base64'); do
#     body=$(echo $comment | base64 --decode | jq -r '.body' | tr -d ' ' | tr -d '\r\n')
#     actor=$(echo $comment | base64 --decode | jq -r '.user.login')
#     id=$(echo $comment | base64 --decode | jq -r '.id')
#     if [[ $body == "$approveCommand" ]]; then
#         echo "Approval command found in comment id $id ..."
#         echo $users | grep -q $actor && echo "Found $actor in team: approver-team" && authorized=true || echo "Not found $actor in team: approver-team"
#         break
#     else
#         echo "Approval command not found in comment id $id ..."
#     fi
# done
# if $authorized; then
#     echo "Approval authorized by $actor"
#     echo "approved=true" >> $GITHUB_OUTPUT
# else
#     echo "Approval not found or not authorized"
#     echo "approved=false" >> $GITHUB_OUTPUT
#     # if !(${{ inputs.fail-if-approval-not-found }}); then
#     #     echo "::notice title=Not Approved::There is no /approve command in the comments from someone in the joshjohanning-org/approver-team team"
#     # fi
# fi

##############################################################################################################
